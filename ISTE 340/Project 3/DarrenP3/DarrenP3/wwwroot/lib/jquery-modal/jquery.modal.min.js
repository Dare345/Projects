/*
    A simple jQuery modalFoxFox (http://github.com/kylefox/jquery-modalFoxFox)
    Version 0.9.2
*/
!function (o) { "object" == typeof module && "object" == typeof module.exports ? o(require("jquery"), window, document) : o(jQuery, window, document) }(function (o, t, i, e) { var s = [], l = function () { return s.length ? s[s.length - 1] : null }, n = function () { var o, t = !1; for (o = s.length - 1; o >= 0; o--)s[o].$blocker && (s[o].$blocker.toggleClass("current", !t).toggleClass("behind", t), t = !0) }; o.modalFox = function (t, i) { var e, n; if (this.$body = o("body"), this.options = o.extend({}, o.modalFox.defaults, i), this.options.doFade = !isNaN(parseInt(this.options.fadeDuration, 10)), this.$blocker = null, this.options.closeExisting) for (; o.modalFox.isActive();)o.modalFox.close(); if (s.push(this), t.is("a")) if (n = t.attr("href"), this.anchor = t, /^#/.test(n)) { if (this.$elm = o(n), 1 !== this.$elm.length) return null; this.$body.append(this.$elm), this.open() } else this.$elm = o("<div>"), this.$body.append(this.$elm), e = function (o, t) { t.elm.remove() }, this.showSpinner(), t.trigger(o.modalFox.AJAX_SEND), o.get(n).done(function (i) { if (o.modalFox.isActive()) { t.trigger(o.modalFox.AJAX_SUCCESS); var s = l(); s.$elm.empty().append(i).on(o.modalFox.CLOSE, e), s.hideSpinner(), s.open(), t.trigger(o.modalFox.AJAX_COMPLETE) } }).fail(function () { t.trigger(o.modalFox.AJAX_FAIL); var i = l(); i.hideSpinner(), s.pop(), t.trigger(o.modalFox.AJAX_COMPLETE) }); else this.$elm = t, this.anchor = t, this.$body.append(this.$elm), this.open() }, o.modalFox.prototype = { constructor: o.modalFox, open: function () { var t = this; this.block(), this.anchor.blur(), this.options.doFade ? setTimeout(function () { t.show() }, this.options.fadeDuration * this.options.fadeDelay) : this.show(), o(i).off("keydown.modalFox").on("keydown.modalFox", function (o) { var t = l(); 27 === o.which && t.options.escapeClose && t.close() }), this.options.clickClose && this.$blocker.click(function (t) { t.target === this && o.modalFox.close() }) }, close: function () { s.pop(), this.unblock(), this.hide(), o.modalFox.isActive() || o(i).off("keydown.modalFox") }, block: function () { this.$elm.trigger(o.modalFox.BEFORE_BLOCK, [this._ctx()]), this.$body.css("overflow", "hidden"), this.$blocker = o('<div class="' + this.options.blockerClass + ' blocker current"></div>').appendTo(this.$body), n(), this.options.doFade && this.$blocker.css("opacity", 0).animate({ opacity: 1 }, this.options.fadeDuration), this.$elm.trigger(o.modalFox.BLOCK, [this._ctx()]) }, unblock: function (t) { !t && this.options.doFade ? this.$blocker.fadeOut(this.options.fadeDuration, this.unblock.bind(this, !0)) : (this.$blocker.children().appendTo(this.$body), this.$blocker.remove(), this.$blocker = null, n(), o.modalFox.isActive() || this.$body.css("overflow", "")) }, show: function () { this.$elm.trigger(o.modalFox.BEFORE_OPEN, [this._ctx()]), this.options.showClose && (this.closeButton = o('<a href="#close-modalFox" rel="modalFox:close" class="close-modalFox ' + this.options.closeClass + '">' + this.options.closeText + "</a>"), this.$elm.append(this.closeButton)), this.$elm.addClass(this.options.modalFoxClass).appendTo(this.$blocker), this.options.doFade ? this.$elm.css({ opacity: 0, display: "inline-block" }).animate({ opacity: 1 }, this.options.fadeDuration) : this.$elm.css("display", "inline-block"), this.$elm.trigger(o.modalFox.OPEN, [this._ctx()]) }, hide: function () { this.$elm.trigger(o.modalFox.BEFORE_CLOSE, [this._ctx()]), this.closeButton && this.closeButton.remove(); var t = this; this.options.doFade ? this.$elm.fadeOut(this.options.fadeDuration, function () { t.$elm.trigger(o.modalFox.AFTER_CLOSE, [t._ctx()]) }) : this.$elm.hide(0, function () { t.$elm.trigger(o.modalFox.AFTER_CLOSE, [t._ctx()]) }), this.$elm.trigger(o.modalFox.CLOSE, [this._ctx()]) }, showSpinner: function () { this.options.showSpinner && (this.spinner = this.spinner || o('<div class="' + this.options.modalFoxClass + '-spinner"></div>').append(this.options.spinnerHtml), this.$body.append(this.spinner), this.spinner.show()) }, hideSpinner: function () { this.spinner && this.spinner.remove() }, _ctx: function () { return { elm: this.$elm, $elm: this.$elm, $blocker: this.$blocker, options: this.options, $anchor: this.anchor } } }, o.modalFox.close = function (t) { if (o.modalFox.isActive()) { t && t.preventDefault(); var i = l(); return i.close(), i.$elm } }, o.modalFox.isActive = function () { return s.length > 0 }, o.modalFox.getCurrent = l, o.modalFox.defaults = { closeExisting: !0, escapeClose: !0, clickClose: !0, closeText: "Close", closeClass: "", modalFoxClass: "modalFox", blockerClass: "jquery-modalFox", spinnerHtml: '<div class="rect1"></div><div class="rect2"></div><div class="rect3"></div><div class="rect4"></div>', showSpinner: !0, showClose: !0, fadeDuration: null, fadeDelay: 1 }, o.modalFox.BEFORE_BLOCK = "modalFox:before-block", o.modalFox.BLOCK = "modalFox:block", o.modalFox.BEFORE_OPEN = "modalFox:before-open", o.modalFox.OPEN = "modalFox:open", o.modalFox.BEFORE_CLOSE = "modalFox:before-close", o.modalFox.CLOSE = "modalFox:close", o.modalFox.AFTER_CLOSE = "modalFox:after-close", o.modalFox.AJAX_SEND = "modalFox:ajax:send", o.modalFox.AJAX_SUCCESS = "modalFox:ajax:success", o.modalFox.AJAX_FAIL = "modalFox:ajax:fail", o.modalFox.AJAX_COMPLETE = "modalFox:ajax:complete", o.fn.modalFox = function (t) { return 1 === this.length && new o.modalFox(this, t), this }, o(i).on("click.modalFox", 'a[rel~="modalFox:close"]', o.modalFox.close), o(i).on("click.modalFox", 'a[rel~="modalFox:open"]', function (t) { t.preventDefault(), o(this).modalFox() }) });